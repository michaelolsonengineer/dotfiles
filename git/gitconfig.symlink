# gitconfig
[user]
    name = Michael P Olson
    email = molson35@ford.com

[github]
    user = molson35

[gitlab]
    user = michaelolsonengineer

[credential]
    helper = cache --timeout 3600

[init]
    templatedir = ~/.dotfiles/git/templates

[pager]
    # requires cloning diff-so-fancy from github
    diff = "diff-so-fancy | less --tabs=4 -RFX"
    # show = "diff-so-fancy | less --tabs=4 -RFX"

[alias]
    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"

    cnv = commit --no-verify
    ci = commit
    pnv = push --no-verify
    co = checkout
    cob = checkout -b
    s = status --short
    ss = status
    st = status
    br = branch -v
    br = branch
    lg = log -p
    type = cat-file -t
    dump = cat-file -p

    delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"

    diff = diff --ignore-space-at-eol -b -w --ignore-blank-lines
    df = difftool
    dt = difftool
    diffr = "!f() { git diff "$1"^.."$1"; }; f"
    dr = "!f() { git dt "$1"^.."$1"; }; f"

    # rebase commands
    cont = rebase --continue
    conf = "!git s | grep ^U"

    ### log commands ###
    l       = "!sh -c \"git --no-pager log --pretty=$GIT_LOG_FORMAT_STR --decorate --abbrev-commit    --graph    --date=relative\""
    ls      = "!sh -c \"git --no-pager log --pretty=$GIT_LOG_FORMAT_STR --decorate --abbrev-commit               --date=short\""
    ll      = "!sh -c \"git --no-pager log --pretty=$GIT_LOG_FORMAT_STR --decorate --no-abbrev-commit --numstat\""
    lsd     = log                              --decorate --abbrev-commit    --graph    --date=short     --all
    hist    = "!sh -c \"git log --pretty=$GIT_LOG_FORMAT_STR --decorate --abbrev-commit    --graph    --date=short\""
    histr   = "!sh -c \"git log --pretty=$GIT_LOG_FORMAT_STR --decorate --abbrev-commit    --graph    --date=relative\""
    histl   = "!sh -c \"git log --pretty=$GIT_LOG_FORMAT_STR --decorate --no-abbrev-commit --graph\""
    histo   = log --oneline                    --decorate --abbrev-commit    --graph    --date=relative
    filelog = log --patch
    fl      = log --patch
    lstat   = log --stat
    llast = "!git ll -1"
    dlc = diff --cached HEAD^
    lc = "!f() { git ll "${1:-HEAD}"^.."${1:-HEAD}"; }; f"

    # show what I did today
    day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"

    # show the committers in the last 100 commits, sorted by who has commited the most
    review = "!git log --no-merges --pretty=%an | head -n 100 | sort | uniq -c | sort -nr"

    # order files by number of commits, ascending
    # Written by Corey Haines
    # Scriptified by Gary Bernhardt
    # Show churn for a time range:
    #   $ git churn --since='1 month ago'
    churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"

    # show all deleted files in the repo
    deleted = "!git log --diff-filter=D --summary | grep delete"

    # create an empty commit
    empty = commit --allow-empty

    # current branch
    cbr = rev-parse --abbrev-ref HEAD

    # submodule shortcuts
    si = submodule init
    su = submodule update
    sub = "!git submodule sync && git submodule update"
    up = "!git pull && git submodule update --init --recursive"

    # show number of commits per contributer, sorted
    count = shortlog -sn

    undo = reset --soft HEAD~1
    # undo = reset HEAD~1 --mixed
    amend = commit -a --amend
    unpush = "!git push -f origin HEAD^:$(git rev-parse --abbrev-ref HEAD)"

    cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

    # rebase the current branch with changes from upstream remote
    update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

    # tag aliases
    # show the last tag
    lt = describe --tags --abbrev=0

    # assume aliases
    hide = update-index --assume-unchanged
    unhide = update-index --no-assume-unchanged
    hidden = "!git ls-files -v | grep ^h | cut -c 3-"
    unhideall = "!git assumed | xargs git update-index --no-assume-unchanged"

    # clean up all
    forget = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D"

    # show the most recently touched branches
    recent = "!git for-each-ref --sort='-committerdate' --format='%(color:red)%(refname)%(color:reset)%09%(committerdate)' refs/heads | sed -e 's-refs/heads/--' | less -XFR"
    latest = "!git for-each-ref --sort='-committerdate' --format='%(color:red)%(refname)%(color:reset)%09%(committerdate)' refs/remotes | sed -e 's-refs/remotes/origin/--' | less -XFR"

    ### grep commands ###
    # 'diff grep'
    dg = "!sh -c 'git ls-files -m | grep $1 | xargs git diff' -"
    # diff grep changes between two commits
    dgc = "!sh -c 'git ls-files | grep $1 | xargs git diff $2 $3 -- ' -"
    # 'checkout grep'
    cg = "!sh -c 'git ls-files -m | grep $1 | xargs git checkout ' -"
    # add grep
    ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs git add --all' -"
    # add all
    aa = !git ls-files -d | xargs git rm && git ls-files -m -o --exclude-standard | xargs git add
    # remove grep - Remove found files that are NOT under version control
    rg = "!sh -c 'git ls-files --others --exclude-standard | grep $1 | xargs rm' -"

    # Kaleidoscope commands
    dkal = difftool -y -t Kaleidoscope
    mkal = mergetool -y -t Kaleidoscope
    remotes = remote -v

    # check out a local copy of a PR. https://gist.github.com/gnarf/5406589
    pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    # git-svn
    spull = "!LAST_REV=`git svn find-rev $(git log --max-count 1 --pretty=format:%H))`; echo $LAST_REV; git-svn fetch -r$LAST_REV && git-svn rebase -l"
    spush = "!git-svn dcommit"

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto

[color "branch"]
    current = green bold
    local = green
    remote = red bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red

[color "sh"]
    branch = yellow

[push]
    # push will only do the current branch, not all branches
    default = current

[branch]
    # set up 'git pull' to rebase instead of merge
    autosetuprebase = always

[apply]
    # do not warn about missing whitespace at EOF
    whitespace = nowarn

[pack]
     ## Toggle if connecting to slow and large git network
     # threads = 1
     # deltaCacheSize = 256m
     # packSizeLimit = 256m
     # windowMemory = 256m
     ##END
     windowMemory = 1g

[core]
    pager = less -FXRS -x2
    editor = vim
    whitespace = cr-at-eol
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = false
    precomposeunicode = false
    excludesfile = ~/.gitignore_global
    ## Toggle if connecting to slow and large git network
    # compression = 0
    # packedGitLimit = 256m
    # packedGitWindowSize = 256m
    ##END

[rerere]
    enabled = true

[gitsh]
    defaultCommand = s

[grep]
    extendRegexp = true
    lineNumber = true

[http]
    followRedirects = true
    postBuffer = 134217728
    sslverify = false
    # maxRequestBuffer = 256m
    proxy = http://internet.ford.com:83/

[gitflow "branch"]
    master = master
    develop = develop

[gitflow "prefix"]
    feature = feature/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag =

[diff]
    renames = copies
    mnemonicprefix = true
    compactionHeuristic = true
    renameLimit = 999999

[difftool]
    prompt = false
    tool = meld

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[difftool "p4merge"]
    cmd = p4merge "$LOCAL" "$REMOTE"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[merge]
    keepBackup = false;
    tool = meld
    summary = true

[mergetool]
    prompt = true
    tool = meld

[mergetool "meld"]
    cmd = meld --auto-merge -L "LOCAL=${LOCAL##*/}" "$LOCAL" -L "MERGED=${MERGED##*/}" "$MERGED" -L "REMOTE=${REMOTE##*/}" "$REMOTE" --output "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustexitcode = true

[rebase]
    instructionFormat = "[%an - %ar] %s"

[gui]
    tabsize = 4

[gc]
    auto = 0

[receive]
    denyCurrentBranch = updateInstead

	
