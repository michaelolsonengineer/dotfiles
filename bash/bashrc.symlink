
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

export CURRENT_SHELL=$(ps -p $$ | awk '$1 == PP {print $4}' PP=$$)
export DOTFILES=$HOME/.dotfiles

# display how long all tasks over 10 seconds take
export REPORTTIME=10

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=6000
HISTFILESIZE=12000

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

[ -e ~/.terminfo ] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo
[ -z "$TMUX" ] && export TERM=xterm-256color-italic

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

parse_git_branch() {
  git branch 2> /dev/null | sed -n '/^\*/s/^\* \(.*\)/(\1)/p'
}

parse_svn_branch() {
  local svnRootPath=$(svn info . 2>/dev/null | grep -F "Working Copy Root Path:" |  sed -e "s/^Working Copy Root Path:\s*//")
  local svnBranch=""

  if [ -n "$svnRootPath" ]; then
    svnBranch=$(svn info $svnRootPath | grep '^URL: '| sed --regexp-extended -e 's/^(.+)((trunk)|(release.*)|(branch.*))$/\2/g')
    echo "($svnBranch)"
  fi
}

# Prompt
PROMPT_NORMAL='\e[0m' # No Color
PROMPT_WHITE='\e[1;37m'
PROMPT_BLACK='\e[0;30m'
PROMPT_BLUE='\e[0;34m'
PROMPT_L_BLUE='\e[1;34m'
PROMPT_GREEN='\e[0;32m'
PROMPT_L_GREEN='\e[1;32m'
PROMPT_CYAN='\e[0;36m'
PROMPT_L_CYAN='\e[1;36m'
PROMPT_RED='\e[0;31m'
PROMPT_L_RED='\e[1;31m'
PROMPT_PURPLE='\e[0;35m'
PROMPT_L_PURPLE='\e[1;35m'
PROMPT_BROWN='\e[0;33m'
PROMPT_YELLOW='\e[1;33m'
PROMPT_GRAY='\e[0;30m'
PROMPT_L_GRAY='\e[0;37m'

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    #PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[01;37m\]@\[\033[01;36m\]\h \[\033[01;34m\]\w \[\033[01;32m\]\$(parse_git_branch)\[\033[m\]\n\$ "
    PS1="${debian_chroot:+($debian_chroot)}${PROMPT_PURPLE}\s"         # \s the name of the shell
    PS1="$PS1 ${PROMPT_L_GRAY}\t"                                      # \t the current time in 24-hour HH:MM:SS format
    PS1="$PS1 ${PROMPT_L_GREEN}\u${PROMPT_WHITE}@${PROMPT_L_CYAN}\h"   # \u the username of the current user
                                                                       # \h the hostname up to the first part
    PS1="$PS1 ${PROMPT_L_BLUE}\w"                                      # \w the current working directory, with $HOME abbreviated with a tilde
    PS1="$PS1 ${PROMPT_L_GREEN}\$(parse_git_branch)"
    PS1="$PS1 ${PROMPT_YELLOW}\$(parse_svn_branch)"
    PS1="$PS1 ${PROMPT_NORMAL}\n\$ "                                   # return to system default
                                                                       # \n the newline character
                                                                       # \$ if the effective UID is 0, a #, otherwise a $
else
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    PS1="${debian_chroot:+($debian_chroot)}\s \t      \u@\h:\w      \$(parse_git_branch) \$(parse_svn_branch) \n\$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
if [[ -d ~/code ]]; then
    export CODE_DIR=~/code
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

if [ -f ~/.aliases.sh ]; then
    source ~/.aliases.sh
fi

# source all .bash files inside of the bash/ directory
for config in $(ls $DOTFILES/**/*.bash); do
    source $config 
done

if [[ -a ~/.personalrc ]]; then
    source ~/.personalrc
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

# You may need to manually set your language environment
export LANG=en_US
export LC_ALL=C
export LC_CTYPE=C

# Set QCFM Debug Root Folder
# export QCFM_DEBUG_ROOT=$HOME/p4/qcfm_debug

# # QCT/D65 Script Command Line Path
# export QCT_DEV_SCRIPTS=$HOME/p4/dev/qctdev

# D65 Integration Scripts
# export QNX_REVIEW_USERNAME=molson@rim.com
# export QNX_REVIEW_PASSWORD=Spartan117

# Setup P4 Command Line Tool
# export P4USER=$(whoami)
# export P4PORT=psp01fll:1666
# export P4DIFF=/usr/bin/p4merge
# export P4MERGE=/usr/bin/p4merge
# export P4GKBRANCHDEFS=$HOME/p4/dev/GK/config/branches
# export P4CLIENT=molson_linux_ws2
# export P4CONFIG=.p4config

# Setup normal editor in P4
# export P4EDITOR=gvim
# Setup P4CH Tool in P4
# export P4EDITOR=$HOME/p4/p4ch/ChangeHelper.sh

# Set SVN Parameters

# # BlackBerry SVN Parameters
# export SVN_USERNAME=molson@blackberry.com
# export SVN_MIRROR=http://svnmirror.rim.net/svn/deckard-65x
# export SVN_F51_D65=http://foundry51.qnx.com/svn/repos/deckard-65x

# Netcomm SVN Parameters
export SVN_USERNAME=michael@netcommwireless.com
export SVN_MIRROR=http://ntcsrsvn/main

# vim
# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
    export GIT_EDITOR='vim'
else
    export EDITOR='vim'
    export GIT_EDITOR='vim'
fi

export JAVA_HOME=/usr/lib/jvm/java-8-oracle

export M2_HOME=/usr/share/maven
export M2=$M2_HOME/bin
MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE "
MAVEN_OPTS+="-Xmx512M -XX:MaxPermSize=512M "
MAVEN_OPTS+="-Dexternal-config-location=classpath:empty_override.properties "
export MAVEN_OPTS

# ssh
alias cleanSsh="if [ -d $HOME/.ssh ]; then
    if [ -f $HOME/.ssh/known_hosts ]
    then
        echo 'removing SSH known Hosts - printing previous contents'
        cat ~/.ssh/known_hosts
        rm ~/.ssh/known_hosts
        echo '.ssh directory should be cleared - printing its contents'
        ls -la ~/.ssh
    else
        echo 'No known ssh hosts'
    fi
fi"

SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initializing new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
      start_agent;
    }
else
    start_agent;
fi

# BlackBerry Shortcuts

# export QNX_TARGET=$HOME/p4/ws2/ap/msm/deckard-65x/developer/trunk/target/qnx6
# export QNX_HOST=$HOME/p4/ws2/ap/msm/deckard-65x/developer/trunk/host/linux/x86

export QNX_CURRENT_IDE_ROOT=~/code/bbndk
export NUMBER_OF_PROCESSORS=8

#DISPLAYVAR=$SSH_CLIENT;
#export DISPLAY=${DISPLAYVAR%% *}:0
#echo $DISPLAY
#export $DISPLAY

export QTVER=qt5
export QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins
export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms

# https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md
export NPM_PACKAGES=$HOME/.npm-packages
#export NPM_CONFIG_PREFIX="$HOME/.npm-global"
npm config set prefix "$NPM_PACKAGES"
export NODE_PATH=$NPM_PACKAGES/lib/node_modules:$NODE_PATH

# Unset manpath so we can inherit from /etc/manpath via the `manpath`
# command
unset MANPATH # delete if you already modified MANPATH elsewhere in your config
export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

export PATH=$PATH:/usr/sbin
export PATH=$PATH:/sbin
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:/usr/local/bin/p4v/bin
export PATH=$PATH:$HOME/local/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/scripts
export PATH=$PATH:$HOME/tools
export PATH=$PATH:$HOME/tools/scripts
export PATH=$PATH:$NPM_PACKAGES/bin
export PATH=$PATH:$JAVA_HOME/bin
export PATH=$PATH:$HOME/git/iOS-checkIPA
export PATH=$PATH:/opt/microchip/xc8/v1.33/bin
export PATH=$PATH:/opt/microchip/xc16/v1.22/bin
export PATH=$PATH:/opt/microchip/xc32/v1.33/bin
# export PATH=$PATH:$HOME/current/p4/deckard-65x/developer/trunk/host/linux/x86/usr/bin
# export PATH=$PATH:$HOME/p4/dev/armos/tools/bb10_ramdump/linux
# export PATH=$PATH:$HOME/p4/dev/armos/tools/bb10_ramdump/scripts
# export PATH=$PATH:$HOME/p4/dev/armos/tools/bb10_busydisp
# export PATH=$PATH:$HOME/p4/dev/armos/toolsrc/bb10_ramdump_server
# export PATH=$PATH:$HOME/p4/dev/GK/Scripts/gkh
# export PATH=$PATH:$HOME/p4/dev/GK/Scripts/OSTools
# export PATH=$PATH:/opt/qdt/QDT
# export PATH=$PATH:$QCT_DEV_SCRIPTS
# export PATH=$PATH:$QCT_DEV_SCRIPTS/d65_int
# export PATH=$PATH:/opt/tools/klocwork/bin