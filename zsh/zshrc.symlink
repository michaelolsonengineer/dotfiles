export DOTFILES=~/.dotfiles
export ZSH=$DOTFILES/zsh
export CURRENT_SHELL=$(ps -p $$ 2>/dev/null | awk '$1 == PP {print $4}' PP=$$)

command_exists() { type "$1" > /dev/null 2>&1; }

[ -e ~/.terminfo ] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
[ -d ~/code ] && export CODE_DIR=~/code

# zplug config
export ZPLUG_LOADFILE=$DOTFILES/zsh/zplug.sh

# only source zplug on initial load
if [ -z "$RELOAD" ]; then
    if ! [ type "zplug" > /dev/null 2>&1 ]; then
        source ~/.zplug/init.zsh
    fi
fi

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
if [ -f ~/.aliases.sh ]; then
    source ~/.aliases.sh
fi

# source all common shell scripts inside of the common/ directory
for config in $(ls $DOTFILES/common/*.sh); do
    source $config
done

# source all .zsh files inside of the zsh/ directory
for config ($ZSH/**/*.zsh) source $config

if [ -e ~/.privaterc ]; then
    source ~/.privaterc
fi

if [ -e ~/.personalrc ]; then
    source ~/.personalrc
fi

[ -z "$TMUX" ] && export TERM=xterm-256color

# add ruby environment if installed
if command_exists rbenv; then
    eval "$(rbenv init -)"
fi

if [ -d ~/.rvm ]; then
    PATH=~/.rvm/bin:$PATH # Add RVM to PATH for scripting
    source ~/.rvm/scripts/rvm
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

if hash brew 2>/dev/null; then
    source `brew --prefix`/etc/profile.d/z.sh
fi

#---------------------
# User configuration:
#---------------------

# display how long all tasks over 10 seconds take
export REPORTTIME=10

# You may need to manually set your language environment
LINUX_VERSION=$(lsb_release -a 2>/dev/null | grep "^Description" | sed 's/Description:\s\+//')
if [[ "$LINUX_VERSION" =~ "Ubuntu 18.04" ]]; then
# as root if encountering locale issue
# echo "LC_ALL=en_US.UTF-8" >> /etc/environment
# echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
# echo "LANG=en_US.UTF-8" > /etc/locale.conf
# unset LANG
# locale-gen en_US.UTF-8

    #export LANG=en_US.UTF-8
    #export LC_ALL=en_US.UTF-8
    #export LC_ALL=$(locale -a | grep UTF-8)
    export LC_ALL=
    export LANG=C

    alias svn="LC_ALL=C svn"
    alias sam="LC_ALL=C.UTF-8 LANG=C.UTF-8 sam"
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

export GIT_DIFFTOOL=meld
export SVN_DIFFTOOL=meld
export TERM_BOLD=$(tput smso)
export TERM_RESET=$(tput rmso)
export NUMBER_OF_CORES=$(/usr/bin/nproc || grep -c ^processor /proc/cpuinfo || echo "1")
export HALF_NUMBER_OF_CORES=$(printf "%1.f" "$(($NUMBER_OF_CORES/2))")

# Java
export JAVA_HOME=/usr/lib/jvm/java-8-oracle

# Maven
export M2_HOME=/usr/share/maven
export M2=$M2_HOME/bin
MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE "
MAVEN_OPTS+="-Xmx512M -XX:MaxPermSize=512M "
MAVEN_OPTS+="-Dexternal-config-location=classpath:empty_override.properties "
export MAVEN_OPTS

# vim
export EDITOR='vim'
export GIT_EDITOR='vim'
if [ -f ~/.vim_runtime/install_awesome_vimrc.sh ]; then
    sh ~/.vim_runtime/install_awesome_vimrc.sh >/dev/null
fi

# Qt environment
export QTVER=qt5
export QT_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins
export QT_QPA_PLATFORM_PLUGIN_PATH=$QT_PLUGIN_PATH/platforms

# NPM environment
# https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md
export NPM_PACKAGES=~/.npm-packages
#export NPM_CONFIG_PREFIX="~/.npm-global"
npm config set prefix "$NPM_PACKAGES"
export NODE_PATH=$NPM_PACKAGES/lib/node_modules:$NODE_PATH

if [ -n "$(which manpath 2>/dev/null)" ]; then
    # Unset manpath so we can inherit from /etc/manpath via the `manpath` command
    unset MANPATH # delete if you already modified MANPATH elsewhere in your config
    export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
fi

export PATH=$PATH:/usr/sbin
export PATH=$PATH:/sbin
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:/usr/local/bin/p4v/bin
export PATH=$PATH:~/local/bin
export PATH=$PATH:~/bin
export PATH=$PATH:~/scripts
export PATH=$PATH:~/tools
export PATH=$PATH:~/tools/scripts
export PATH=$PATH:$NPM_PACKAGES/bin
export PATH=$PATH:$JAVA_HOME/bin
export PATH=$PATH:~/git/iOS-checkIPA
export PATH=$PATH:/opt/microchip/xc8/v1.33/bin
export PATH=$PATH:/opt/microchip/xc16/v1.22/bin
export PATH=$PATH:/opt/microchip/xc32/v1.33/bin
# export PATH=$PATH:~/current/p4/deckard-65x/developer/trunk/host/linux/x86/usr/bin
# export PATH=$PATH:~/p4/dev/armos/tools/bb10_ramdump/linux
# export PATH=$PATH:~/p4/dev/armos/tools/bb10_ramdump/scripts
# export PATH=$PATH:~/p4/dev/armos/tools/bb10_busydisp
# export PATH=$PATH:~/p4/dev/armos/toolsrc/bb10_ramdump_server
# export PATH=$PATH:~/p4/dev/GK/Scripts/gkh
# export PATH=$PATH:~/p4/dev/GK/Scripts/OSTools
# export PATH=$PATH:/opt/qdt/QDT
# export PATH=$PATH:$QCT_DEV_SCRIPTS
# export PATH=$PATH:$QCT_DEV_SCRIPTS/d65_int
# export PATH=$PATH:/opt/tools/klocwork/bin

# Verion could be 2 or 3
# export PYTHON_VERSION=3
# export ANACONDA_PYTHON_VERSION=$PYTHON_VERSION
# export ANACONDA_DIR=/opt/anaconda$ANACONDA_PYTHON_VERSION
# # added by Anaconda$ANACONDA_PYTHON_VERSION 5.3.0 installer
# # >>> conda init >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$(CONDA_REPORT_ERRORS=false "$ANACONDA_DIR/bin/conda" shell.$CURRENT_SHELL hook 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     \eval "$__conda_setup"
# else
#     if [ -f "$ANACONDA_DIR/etc/profile.d/conda.sh" ]; then
#         source "$ANACONDA_DIR/etc/profile.d/conda.sh"
#         CONDA_CHANGEPS1=false conda activate base
#     else
#         \export PATH="$ANACONDA_DIR/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda init <<<

if [ -e "$SPARK_HOME" ]; then
    PY4J_SRC=$(find $SPARK_HOME/python/lib -name "py4j*")
    export PYTHONPATH=$PY4J_SRC:$SPARK_HOME/python/lib:$PYTHONPATH
fi
